{
  "name": "openstack-ec2api",
  "description": "Installs and configures the ec2api Service",
  "long_description": "Description\n===========\n\nThis cookbook installs the OpenStack ec2api service **ec2api** as part of an OpenStack reference deployment Chef for OpenStack.\n\nhttps://wiki.openstack.org/wiki/ec2api\n\nRequirements\n============\n\nChef 11 or higher required (for Chef environment use).\n\nCookbooks\n---------\n\nThe following cookbooks are dependencies:\n\n* openstack-common\n* openstack-identity\n\nUsage\n=====\n\napi\n------\n- Configure and start ec2api-api service\n\napi-cfn\n------\n- Configure and start ec2api-api-cfn service\n\napi-cloudwatch\n------\n- Configure and start ec2api-api-cloudwatch service\n\nclient\n----\n- Install the ec2api client packages\n\ncommon\n------\n- Installs the ec2api packages and setup configuration for ec2api.\n\nengine\n------\n- Setup the ec2api database and start ec2api-engine service\n\nidentity_registration\n---------------------\n- Registers the ec2api API endpoint, ec2api service and user\n\nAttributes\n==========\n\nAttributes for the ec2api service are in the ['openstack']['ec2api'] namespace.\n\n* `openstack['ec2api']['verbose']` - Enables/disables verbose output for ec2api services.\n* `openstack['ec2api']['debug']` - Enables/disables debug output for ec2api services.\n* `openstack['ec2api']['identity_service_chef_role']` - The name of the Chef role that installs the Keystone Service API\n* `openstack['ec2api']['rabbit_server_chef_role']` - The name of the Chef role that knows about the message queue server\n* `openstack['ec2api']['user']` - User ec2api runs as\n* `openstack['ec2api']['group']` - Group ec2api runs as\n* `openstack['ec2api']['num_engine_workers']` - Number of ec2api-engine processes to fork and run.\n* `openstack['ec2api']['api']['workers']` - Number of workers for ec2api api service.\n* `openstack['ec2api']['api_cfn']['workers']` - Number of workers for ec2api api cfn service.\n* `openstack['ec2api']['api_cloudwatch']['workers']` - Number of workers for ec2api api cloudwatch service.\n* `openstack['ec2api']['db']['username']` - Username for ec2api database access\n* `openstack['ec2api']['api']['adminURL']` - Used when registering ec2api endpoint with keystone\n* `openstack['ec2api']['api']['internalURL']` - Used when registering ec2api endpoint with keystone\n* `openstack['ec2api']['api']['publicURL']` - Used when registering ec2api endpoint with keystone\n* `openstack['ec2api']['service_tenant_name']` - Tenant name used by ec2api when interacting with keystone - used in the API and registry paste.ini files\n* `openstack['ec2api']['service_user']` - User name used by ec2api when interacting with keystone - used in the API and registry paste.ini files\n* `openstack['ec2api']['service_role']` - User role used by ec2api when interacting with keystone - used in the API and registry paste.ini files\n* `openstack['ec2api']['api']['auth']['cache_dir']` - Defaults to `/var/cache/ec2api`. Directory where `auth_token` middleware writes certificates for ec2api\n* `openstack['ec2api']['syslog']['use']` - Should ec2api log to syslog?\n* `openstack['ec2api']['syslog']['facility']` - Which facility ec2api should use when logging in python style (for example, `LOG_LOCAL1`)\n* `openstack['ec2api']['syslog']['config_facility']` - Which facility ec2api should use when logging in rsyslog style (for example, local1)\n* `openstack['ec2api']['rpc_thread_pool_size']` - size of RPC thread pool\n* `openstack['ec2api']['rpc_conn_pool_size']` - size of RPC connection pool\n* `openstack['ec2api']['rpc_response_timeout']` - seconds to wait for a response from call or multicall\n* `openstack['ec2api']['platform']` - hash of platform specific package/service names and options\n* `openstack['ec2api']['api']['auth']['version']` - Select v2.0 or v3.0. Default v2.0. The auth API version used to interact with identity service.\n* `openstack['ec2api']['api']['auth']['memcached_servers']` - A list of memcached server(s) for caching\n* `openstack['ec2api']['api']['auth']['memcache_security_strategy']` - Whether token data should be authenticated or authenticated and encrypted. Acceptable values are MAC or ENCRYPT.\n* `openstack['ec2api']['api']['auth']['memcache_secret_key']` - This string is used for key derivation.\n* `openstack['ec2api']['api']['auth']['hash_algorithms']` - Hash algorithms to use for hashing PKI tokens.\n* `openstack['ec2api']['api']['auth']['cafile']` - A PEM encoded Certificate Authority to use when verifying HTTPs connections.\n* `openstack['ec2api']['api']['auth']['insecure']` - Whether to allow the client to perform insecure SSL (https) requests.\n\nClients configurations\n----------------------\n* `openstack['ec2api']['clients']['ca_file']` - A PEM encoded Certificate Authority to use for clients when verifying HTTPs connections.\n* `openstack['ec2api']['clients']['cert_file']` - Cert file to use for clients when verifying HTTPs connections.\n* `openstack['ec2api']['clients']['key_file']` - Private key file to use for clients when verifying HTTPs connections.\n* `openstack['ec2api']['clients']['insecure']` - Whether to allow insecure SSL (https) requests when calling clients.\n\nclients_ceilometer configurations\n---------------------------------\n* `openstack['ec2api']['clients_ceilometer']['ca_file']` - A PEM encoded Certificate Authority to use for clients_ceilometer when verifying HTTPs connections.\n* `openstack['ec2api']['clients_ceilometer']['cert_file']` - Cert file to use for clients_ceilometer when verifying HTTPs connections.\n* `openstack['ec2api']['clients_ceilometer']['key_file']` - Private key file to use for clients_ceilometer when verifying HTTPs connections.\n* `openstack['ec2api']['clients_ceilometer']['insecure']` - Whether to allow insecure SSL (https) requests when calling clients_ceilometer.\n\nclients_cinder configurations\n-----------------------------\n* `openstack['ec2api']['clients_cinder']['ca_file']` - A PEM encoded Certificate Authority to use for clients_cinder when verifying HTTPs connections.\n* `openstack['ec2api']['clients_cinder']['cert_file']` - Cert file to use for clients_cinder when verifying HTTPs connections.\n* `openstack['ec2api']['clients_cinder']['key_file']` - Private key file to use for clients_cinder when verifying HTTPs connections.\n* `openstack['ec2api']['clients_cinder']['insecure']` - Whether to allow insecure SSL (https) requests when calling clients_cinder.\n\nclients_glance configurations\n-----------------------------\n* `openstack['ec2api']['clients_glance']['ca_file']` - A PEM encoded Certificate Authority to use for clients_glance when verifying HTTPs connections.\n* `openstack['ec2api']['clients_glance']['cert_file']` - Cert file to use for clients_glance when verifying HTTPs connections.\n* `openstack['ec2api']['clients_glance']['key_file']` - Private key file to use for clients_glance when verifying HTTPs connections.\n* `openstack['ec2api']['clients_glance']['insecure']` - Whether to allow insecure SSL (https) requests when calling clients_glance.\n\nclients_ec2api configurations\n---------------------------\n* `openstack['ec2api']['clients_ec2api']['ca_file']` - A PEM encoded Certificate Authority to use for clients_ec2api when verifying HTTPs connections.\n* `openstack['ec2api']['clients_ec2api']['cert_file']` - Cert file to use for clients_ec2api when verifying HTTPs connections.\n* `openstack['ec2api']['clients_ec2api']['key_file']` - Private key file to use for clients_ec2api when verifying HTTPs connections.\n* `openstack['ec2api']['clients_ec2api']['insecure']` - Whether to allow insecure SSL (https) requests when calling clients_ec2api.\n\nclients_keystone configurations\n-------------------------------\n* `openstack['ec2api']['clients_keystone']['ca_file']` - A PEM encoded Certificate Authority to use for clients_keystone when verifying HTTPs connections.\n* `openstack['ec2api']['clients_keystone']['cert_file']` - Cert file to use for clients_keystone when verifying HTTPs connections.\n* `openstack['ec2api']['clients_keystone']['key_file']` - Private key file to use for clients_keystone when verifying HTTPs connections.\n* `openstack['ec2api']['clients_keystone']['insecure']` - Whether to allow insecure SSL (https) requests when calling clients_keystone.\n\nclients_neutron configurations\n------------------------------\n* `openstack['ec2api']['clients_neutron']['ca_file']` - A PEM encoded Certificate Authority to use for clients_neutron when verifying HTTPs connections.\n* `openstack['ec2api']['clients_neutron']['cert_file']` - Cert file to use for clients_neutron when verifying HTTPs connections.\n* `openstack['ec2api']['clients_neutron']['key_file']` - Private key file to use for clients_neutron when verifying HTTPs connections.\n* `openstack['ec2api']['clients_neutron']['insecure']` - Whether to allow insecure SSL (https) requests when calling clients_neutron.\n\nclients_nova configurations\n---------------------------------\n* `openstack['ec2api']['clients_nova']['ca_file']` - A PEM encoded Certificate Authority to use for clients_nova when verifying HTTPs connections.\n* `openstack['ec2api']['clients_nova']['cert_file']` - Cert file to use for clients_nova when verifying HTTPs connections.\n* `openstack['ec2api']['clients_nova']['key_file']` - Private key file to use for clients_nova when verifying HTTPs connections.\n* `openstack['ec2api']['clients_nova']['insecure']` - Whether to allow insecure SSL (https) requests when calling clients_nova.\n\nNotification definitions\n------------------------\n* `openstack['ec2api']['notification_driver']` - driver\n* `openstack['ec2api']['default_notification_level']` - level\n* `openstack['ec2api']['default_publisher_id']` - publisher id\n* `openstack['ec2api']['list_notifier_drivers']` - list of drivers\n* `openstack['ec2api']['notification_topics']` - notifications topics\n\nMQ attributes\n-------------\n* `openstack[\"ec2api\"][\"mq\"][\"service_type\"]` - Select qpid or rabbitmq. default rabbitmq\nTODO: move rabbit parameters under openstack[\"ec2api\"][\"mq\"]\n* `openstack[\"ec2api\"][\"rabbit\"][\"username\"]` - Username for nova rabbit access\n* `openstack[\"ec2api\"][\"rabbit\"][\"vhost\"]` - The rabbit vhost to use\n* `openstack[\"ec2api\"][\"rabbit\"][\"port\"]` - The rabbit port to use\n* `openstack[\"ec2api\"][\"rabbit\"][\"host\"]` - The rabbit host to use (must set when `openstack[\"ec2api\"][\"rabbit\"][\"ha\"]` false).\n* `openstack[\"ec2api\"][\"rabbit\"][\"ha\"]` - Whether or not to use rabbit ha\n\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"host\"]` - The qpid host to use\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"port\"]` - The qpid port to use\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"qpid_hosts\"]` - Qpid hosts. TODO. use only when ha is specified.\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"username\"]` - Username for qpid connection\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"password\"]` - Password for qpid connection\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"sasl_mechanisms\"]` - Space separated list of SASL mechanisms to use for auth\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"reconnect_timeout\"]` - The number of seconds to wait before deciding that a reconnect attempt has failed.\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"reconnect_limit\"]` - The limit for the number of times to reconnect before considering the connection to be failed.\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"reconnect_interval_min\"]` - Minimum number of seconds between connection attempts.\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"reconnect_interval_max\"]` - Maximum number of seconds between connection attempts.\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"reconnect_interval\"]` - Equivalent to setting qpid_reconnect_interval_min and qpid_reconnect_interval_max to the same value.\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"heartbeat\"]` - Seconds between heartbeat messages sent to ensure that the connection is still alive.\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"protocol\"]` - Protocol to use. Default tcp.\n* `openstack[\"ec2api\"][\"mq\"][\"qpid\"][\"tcp_nodelay\"]` - Disable the Nagle algorithm. default disabled.\n\nThe following attributes are defined in attributes/default.rb of the common cookbook, but are documented here due to their relevance:\n\n* `openstack['endpoints']['ec2api-api-bind']['host']` - The IP address to bind the service to\n* `openstack['endpoints']['ec2api-api-bind']['port']` - The port to bind the service to\n* `openstack['endpoints']['ec2api-api-bind']['bind_interface']` - The interface name to bind the service to\n\n* `openstack['endpoints']['ec2api-api-cfn-bind']['host']` - The IP address to bind the service to\n* `openstack['endpoints']['ec2api-api-cfn-bind']['port']` - The port to bind the service to\n* `openstack['endpoints']['ec2api-api-cfn-bind']['bind_interface']` - The interface name to bind the-cfn service to\n\n* `openstack['endpoints']['ec2api-api-cloudwatch-bind']['host']` - The IP address to bind the service to\n* `openstack['endpoints']['ec2api-api-cloudwatch-bind']['port']` - The port to bind the service to\n* `openstack['endpoints']['ec2api-api-cloudwatch-bind']['bind_interface']` - The interface name to bind the-cloudwatch service to\n\nIf the value of the 'bind_interface' attribute is non-nil, then the service will be bound to the first IP address on that interface. If the value of the 'bind_interface' attribute is nil, then the service will be bound to the IP address specifie>\n\nMiscellaneous Options\n---------------------\n\nArrays whose elements will be copied exactly into the respective config files (contents e.g. ['option1=value1', 'option2=value2']).\n\n* `openstack[\"ec2api\"][\"misc_ec2api\"]` - Array of bare options for `ec2api.conf`.\n* `ec2api_auth_encryption_key` - Key used to encrypt authentication info in the database. Length of this key must be 16, 24 or 32 characters. Comes from secrets databag.\n\nTesting\n=====\n\nPlease refer to the [TESTING.md](TESTING.md) for instructions for testing the cookbook.\n\nLicense and Author\n==================\n\n|                      |                                                    |\n|:---------------------|:---------------------------------------------------|\n| **Author**           |  Zhao Fang Han (<hanzhf@cn.ibm.com>)               |\n| **Author**           |  Chen Zhiwei (<zhiwchen@cn.ibm.com>)               |\n| **Author**           |  Ionut Artarisi (<iartarisi@suse.cz>)              |\n| **Author**           |  Mark Vanderwiel (<vanderwl@us.ibm.com>)           |\n| **Author**           |  Jan Klare (<j.klare@x-ion.de>)                    |\n|                      |                                                    |\n| **Copyright**        |  Copyright (c) 2013-2014, IBM Corp.                |\n| **Copyright**        |  Copyright (c) 2014, SUSE Linux, GmbH.             |\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "",
  "maintainer_email": "",
  "license": "Apache 2.0",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "centos": ">= 0.0.0"
  },
  "dependencies": {
    "openstack-common": ">= 12.0.0",
    "openstack-identity": ">= 12.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "openstack-ec2api::common": "Installs packages and configures a ec2api Server"
  },
  "version": "12.0.0",
  "source_url": "",
  "issues_url": ""
}